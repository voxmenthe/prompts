# -*- coding: utf-8 -*-
"""CI_Python_Package_QuickStart_Guide_Shelf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srG2Lih8xbEit50rJ_M1hhedGdB_dhxL
"""

from IPython.display import clear_output, HTML

"""# Shelf Content Intelligence Python SDK Tutorial

Welcome to the step-by-step guide on how to leverage the Shelf Content Intelligence Python SDK. This tutorial will walk you through the process of installation, setting up your environment, and diving into the basics of using the SDK to interact with Shelf API. Whether you're looking to retrieve content items, perform searches, or analyze content with enrichments, this guide has you covered.

### Installation

First things first, let's get the SDK installed in your environment. The SDK is available as a Python Wheel package, which can be installed directly using `pip`. Run the following command in your notebook or terminal:
"""

!pip install shelf==0.1.4 --index-url https://pypi.shelf.io/simple
clear_output()

"""This command fetches and installs the latest version of the Shelf SDK directly from the provided URL.

### Setting Up Your Environment

To interact with the Shelf API, you'll need to have your API token and the API URL ready. For security reasons, it's essential to store these values securely and not hard-code them in your scripts. Here's how you can prompt for these secrets and set them as environment variables:
"""

import getpass
import os

def set_env(name):
    secret = getpass.getpass(f"Enter value of {name}: ")
    os.environ[name] = secret

"""### Choosing Your Region

Shelf operates in multiple regions, and you must specify your account's correct region to ensure your API requests are routed correctly. Learn more about regions and how to set your base URL by visiting the [Shelf Regions And Domains documentation](https://docs.shelf.io/dev-portal/api-essentials/shelf-regions-and-domains).

Base URL can be:
- for US region: https://api.shelf.io
- for EU region: https://api.shelf-eu.com
- for CA region: https://api.shelf-ca.com

### Getting Your API Token

If you don't yet have an API token, please visit our developer portal to create one. For step-by-step instructions, visit [Create API Token](https://docs.shelf.io/dev-portal/api-essentials/create-api-token).
"""

set_env("SHELF_API_TOKEN")
set_env("SHELF_API_URL")

"""### Initializing the Shelf Content Intelligence Client

With your environment set up, you're now ready to initialize the Shelf Content Intelligence client. This client will be your gateway to interacting with the Shelf API.
"""

from shelf.ci import ContentIntelligenceClient

ci = ContentIntelligenceClient()

"""## Making Your First API Call

Let's start with something simple—listing content items from your Shelf repository.

### List Content Items
"""

for item in ci.content_items.list(items_limit=1):
  print(item)

"""This code snippet fetches and prints out the first content item from your Shelf.


You can delve deeper into the specifics of a content item, such as retrieving its title, ID, or even converting its properties to a dictionary for easier access.

### Get Content item
"""

item = ci.content_items.get(item_id=item.external_id)

type(item)

item.id

item.title

item.to_dict()

"""### Performing a Content Search

Searching through your content items is a breeze with the SDK. Here’s how you can find a specific document or piece of content:
"""

content_items = ci.content_items.search(query="Shelf Customer Support Process Guide", items_limit=1)
for item in content_items:
  print(item.title)

"""## Working with Semantic Sections and Enrichments

The SDK allows you to not only retrieve entire content items but also to drill down into specific sections or enrichments of content for more granular analysis.

### Retrieving Semantic Sections
"""

sections = ci.sections.list(item_id=item.external_id)
for section in sections:
  print(section.title)

sections = list(ci.sections.list(item_id=item.external_id))[:8]
for section in sections:
  print(section)

section_content = ci.sections.retrieve(item_id=item.external_id, section_id=section.id)
print(section_content)

"""## Perform REST API calls on your own"""

search_query = "How to create folders?"

result = ci.client.post(
    path="/cil-search/content/semantic-sections",
    json={
        "query": search_query,
        "size": 1,
        "origin": "shelf",
        "format": "markdown",
        "sortBy": "RELEVANCE",
        "sortOrder": "DESC",
    }
)

# result

print(result["sections"][0]['content'])

"""## Working with Enrichments

Enrichments provide additional information regarding your content items:
"""

enrichments = ci.content_items.get_enrichments(item_id=item.external_id)

enrichments[:2]

enrichments[-1:]

"""## Topics"""

topics = ci.topics.list()
for topic in topics:
  print(topic)



"""# Configurations, Conversations, and Feedbacks

The Shelf Content Intelligence SDK simplifies the process of managing app configurations, logging conversations between users and assistants, and acquiring feedback on those conversations. This guide will walk you through how to use these features effectively within your applications.

## AppConfigs: Customizing Your AI's Behavior

AppConfigs allow you to adjust various settings that dictate how your AI interacts with its environment, from custom prompt templates to enabling specific search capabilities.

### List AppConfigs

To see what configurations are currently available:
"""

app_configs = ci.app_configs.list()
for app_config in app_configs:
  print(app_config)

"""### Get AppConfig

Retrieve the details of a specific app configuration using its ID:
"""

app_config = ci.app_configs.get(config_id=app_config.id)

app_config

app_config.to_dict()

"""### Create AppConfig

You can create a new app configuration if needed. Below is how you might define and create one:

"""

def default_prompt_template() -> str:
    """
    Returns the default prompt template for the language model.
    """
    return r"""
            Please answer the following question based on the information found
            within the sections enclosed by triplet quotes (\`\`\`).
            Your response should be concise, well-written, and follow markdown formatting guidelines:

            - Use bullet points for list items.
            - Use **bold** text for emphasis where necessary.

            **Question:** {{user.input}}

            Thank you for your detailed attention to the request
            **Context information**:
            ```
            {{#documents}} {{document.title}} {{document.text}} {{/documents}}
            ```

            **User Question:** {{user.input}}
            Answer:
            """

config_dict = {
    "name": "Python SDK Test Config",
    "description": "This is a test config",
    "searchCopilotEnabled": False,
    "enrichments": [
        "acronyms.disambiguation",
    ],
    "filters": {
        "content": [],
        "quality": [],
    },
    "promptTemplates": [
        {
            "name": "PythonSdkTestPromptTemplate",
            "template": default_prompt_template(),
            "isDefault": True,
            "llmSettings": {
                "maxResponseTokens": 1000,
                "temperature": 0.1
            }
        }
    ]
}

"""Remember to replace the placeholders and templates with details relevant to your application needs."""

app_config = ci.app_configs.create(
    config_dict
)

app_config

config_id = app_config.id
config_id

"""### Update AppConfig

Updating an existing configuration can be done as follows:
"""

ci.app_configs.update(config_id=config_id, config_data=config_dict)

"""## Conversations: Logging Interactions Between Users and AI

Storing conversations aids in refining the AI's responses based on past interactions.

You can read more on REST API dev portal [Create Chat Conversation](https://shelf-api:DvZpgQPAAGY4gT@developer.shelf.io/cip-genai/#tag/Conversations/operation/createConversation)

### Create Conversation

To log a new conversation:
"""

import uuid
generate_message_id = lambda : str(uuid.uuid4())

generate_message_id()

from datetime import datetime

# Specify your date and time
user_message_time = datetime(2020, 1, 1, 0, 0, 0).strftime('%Y-%m-%dT%H:%M:%SZ')
answer_message_time = datetime(2020, 1, 1, 0, 1, 0).strftime('%Y-%m-%dT%H:%M:%SZ')

print(user_message_time, " - user_message_time")
print(answer_message_time, " - answer_message_time")

search_query = "Monthly Cap Strategy"
app_answer = "LLM Answer"

conversation_data = {
  "messages": [
    {
      "messageId": generate_message_id(),
      "content": search_query,
      "role": "user",
      "createdAt": user_message_time,
    },
    {
      "messageId": generate_message_id(),
      "content": app_answer,
      "role": "assistant",
      "createdAt": answer_message_time,
      "externalContentIds": [
        item.external_id,
      ],
      "sectionIds": [
        section.id,
      ],
    }
  ]
}

## Create conversation

response = ci.client.post(
    path=f"/cip-genai/app-configs/{config_id}/conversations",
    json=conversation_data
)
response

# conversation id
conversation_id = response["id"]
conversation_id

"""### List conversations

Fetching a list of all conversations can be useful for analysis and monitoring:

"""

response = ci.client.post(
    path="/cip-genai/app-configs/all/conversations",
    json={}
)

import pandas as pd
pd.DataFrame(response)

"""### List Messages of a Conversation

If you need to dive deeper into the specifics of a conversation:
"""

response = ci.client.post(
    path="/cip-genai/app-configs/all/conversations",
    json={
        "filters": {
          "idsToInclude": [conversation_id,]
        }
    }
)

response[0]["messages"]

"""## Feedbacks: Enhancing AI with User Input

Collecting feedback on conversations helps to gauge user satisfaction and improve the AI's accuracy and responsiveness.

### Create Feedback

To submit feedback on a particular conversation:
"""

answer_message_id = "8a9724b5-e46a-4618-9b68-0c5c507e03df"

feedback_id = ci.feedbacks.create(
    config_id=config_id,
    conversation_id=conversation_id,
    feedback_type="submit_answer_feedback",
    response_id=answer_message_id,
    text="Great answer!",
    value="positive",
)

feedback_id

"""### List Feedbacks

Reviewing the feedback received:
"""

feedbacks = list(ci.feedbacks.list())
for feedback in feedbacks:
  print(feedback)

feedbacks = list(ci.feedbacks.list(filters={
    "conversationId": conversation_id,
}))
for feedback in feedbacks:
  print(feedback)

for feedback in feedbacks:
  print("Feedback:")
  print(f" - Type: {feedback.type}")
  print(f" - Value: {feedback.value}")
  if feedback.text:
    print(f" - Text: {feedback.text}")
  print("")

"""The provided examples showcase how to set up configurations, log conversations, and submit feedback using the SDK. These features are instrumental in customizing the AI's behavior, analyzing user interactions, and improving the overall intelligence of the system."""